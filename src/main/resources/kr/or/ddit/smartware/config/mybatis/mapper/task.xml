<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="task">
	<resultMap id="clobmap" type="hashmap">
    	<result property="TASK_CONT" column="TASK_CONT" jdbcType="CLOB" javaType="java.lang.String"/>
    	<result property="RS" column="RS" jdbcType="CLOB" javaType="java.lang.String"/>
	</resultMap>

	<!-- 프로젝트의 전체 업무 리스트 반환 -->
	<select id="getAllProjectTask" parameterType="String" resultType="task">
		select *
		  from task
		 where pro_id = #{pro_id}
		 order by st_dt, end_dt
	</select>
	
	<!-- 프로젝트의 사원의 업무 리스트 반환 -->
	<select id="getEmpProjectTask" parameterType="map" resultType="task">
		select *
		  from task
		 where pro_id = #{pro_id}
		   and task_id in (select task_id
		                     from pro_task
		                    where emp_id = #{emp_id})
		 order by st_dt, end_dt
	</select>

	<!-- 주간 업무 리스트 반환 -->
	<select id="getWeekTask" parameterType="map" resultType="task">
		select *
		  from task
		 where task_id in (select task_id
		                     from pro_task
		                    where pro_id = #{pro_id}
		                      and emp_id = #{emp_id}
		                      and pa_task_id is not null)
		   and to_number(to_char(trunc(st_dt, 'iw'),'WW')) <![CDATA[<=]]> to_number(to_char(trunc(sysdate, 'iw'),'WW')) 
		   and to_number(to_char(trunc(end_dt, 'iw'),'WW')) >= to_number(to_char(trunc(sysdate, 'iw'),'WW'))
		 order by st_dt, end_dt
	</select>
	
	<!-- 지연중인 업무 리스트 반환 -->
	<select id="getDelayTask" parameterType="map" resultType="task">
		select *
		  from task
		 where task_id in (select task_id
		                     from pro_task
		                    where pro_id = #{pro_id}
		                      and emp_id = #{emp_id}
		                      and pa_task_id is not null)
		   and end_dt <![CDATA[<=]]> trunc(sysdate, 'iw')
		   and per <![CDATA[<]]> 100
		 order by st_dt, end_dt
	</select>

	<!-- 프로젝트의 전체 일감 반환(gantt) -->
	<select id="getAllTask" parameterType="String" resultType="hashmap" resultMap="clobmap">
    	select a.*, b.emp_id, c.emp_nm
    	  from (select task.*
    			  from task
				 start with pro_id = #{pro_id}
				   and pa_task_id is null
			   connect by prior task_id = pa_task_id
				 order siblings by task_id) a, pro_task b, employee c
		 where a.task_id = b.task_id
		   and b.emp_id = c.emp_id
	</select>
	<!-- connect_by_root(task_cont) rs  -->
	
	<!-- 프로젝트의 일감 반환(gantt) -->
	<select id="getTask" parameterType="String" resultType="hashmap" resultMap="clobmap">
        select a.*, b.emp_id, c.emp_nm
		  from task a, pro_task b, employee c
		 where a.task_id = #{task_id}
		   and a.task_id = b.task_id
		   and b.emp_id = c.emp_id
	</select>
		
	<!-- emp_id에 해당하는 모든 프로젝트의 일간기준 지연업무 조회 -->
	<select id="getAllDelayTask" parameterType="String" resultType="task">
		select *
		  from task
		 where task_id in (select task_id
		                     from pro_task
		                    where emp_id = #{emp_id}
		                      and pa_task_id is not null)
		   and end_dt <![CDATA[<=]]> sysdate
		   and per <![CDATA[<]]> 100
		 order by st_dt, end_dt
	</select>	
		
	<!-- emp_id에 해당하는 모든 프로젝트의 일간업무 조회 -->
	<select id="getAllTodayTask" parameterType="String" resultType="task">
		select *
		  from task
		 where task_id in (select task_id
		                     from pro_task
		                     where emp_id = #{emp_id}
		                      and pa_task_id is not null)
		   and sysdate between st_dt and end_dt
		 order by st_dt, end_dt
	</select>

	<select id="getAllWeekDlayTask" parameterType="String" resultType="task">
		select *
		  from task
		 where task_id in (select task_id
		                     from pro_task
		                    where emp_id = #{emp_id}
		                      and pa_task_id is not null)
		   and end_dt <![CDATA[<=]]> trunc(sysdate, 'iw')
		   and per <![CDATA[<]]> 100
		 order by st_dt, end_dt
	</select>

	<!-- emp_id에 해당하는 프로젝트의 주간업무 조회 -->
	<select id="getAllWeekTask" parameterType="String" resultType="task">
		select *
		  from task
		 where task_id in (select task_id
		                     from pro_task
		                     where emp_id = #{emp_id}
		                      and pa_task_id is not null)
		   and to_number(to_char(trunc(st_dt, 'iw'),'WW')) <![CDATA[<=]]> to_number(to_char(trunc(sysdate, 'iw'),'WW')) 
		   and to_number(to_char(trunc(end_dt, 'iw'),'WW')) >= to_number(to_char(trunc(sysdate, 'iw'),'WW'))
		 order by st_dt, end_dt
	</select>

	<!-- 일감 추가 -->
	<insert id="insertTask" parameterType="project">
		insert into task(task_id, task_cont, st_dt, end_dt, pro_id, pa_task_id, per)
			values('task' || lpad(task_seq.nextval, 4, 0), #{task_cont}, 
				   #{st_dt}, #{end_dt}, #{pro_id}, #{pa_task_id, jdbcType=VARCHAR}, #{per})
		<selectKey order="AFTER" resultType="String" keyProperty="task_id" >
			select 'task' || lpad(task_seq.currval, 4, 0) from dual
		</selectKey>
	</insert>
	
	<!-- 일감 담당자 추가  -->
	<insert id="insertProTask" parameterType="proTask">
		insert into pro_task(emp_id, task_id, pro_id)
			values(#{emp_id}, #{task_id}, #{pro_id})
	</insert>
	
	<!-- 일감 히스토리 추가 -->
	<insert id="insertTaskHistory" parameterType="taskHistory">
		insert into task_history(history_id, task_id, emp_id, history, change_dt)
			values(#{history_id}, #{task_id}, #{emp_id}, #{history}, #{change_dt})
	</insert>
	
	<!-- 일감 수정 -->
	<update id="updateTask" parameterType="task">
		update task
		   set task_cont = #{task_cont},
		   	   st_dt = #{st_dt},
		   	   end_dt = #{end_dt},
		   	   pa_task_id = #{pa_task_id, jdbcType=VARCHAR},
		   	   per = #{per}
		 where task_id = #{task_id}
	</update>
	
	<!-- 일감 담당자 수정 -->
	<update id="updateProTask" parameterType="proTask">
		update pro_task
		   set emp_id = #{emp_id}
		 where task_id = #{task_id}
	</update>
	
	<!-- 일감 삭제 -->
	<delete id="deleteTask">
		delete from task
		 where task_id = #{task_id}
	</delete>
	
	<!-- 일감 담당자 삭제 -->
	<delete id="deleteProTask">
		delete from pro_task
		 where task_id = #{task_id}
	</delete>
	
	<!-- 일감 히스토리 삭제 -->
	<delete id="deleteTaskHistory">
		delete from task_history
		 where task_id = #{task_id}
	</delete>
	
</mapper>