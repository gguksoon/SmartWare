<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="employee">
    <!-- 사원 리스트 -->
	<select id="allEmployeeList" resultType="employee">
		select * from employee
	</select>

    <select id="detailEmpList" resultType="hashMap">
        select a.*, b.*, c.*, d.*
        from employee a
        LEFT OUTER JOIN position b ON a.POSI_ID = b.POSI_ID
        LEFT OUTER JOIN DEPARTMENT c ON a.DEPART_ID = c.DEPART_ID
        LEFT OUTER JOIN JOB d ON a.JOB_ID = d.JOB_ID
        ORDER BY a.posi_id
    </select>

    <!-- 사원 상세 정보 -->
	<select id="getEmployee" parameterType="map" resultType="employee">
		select *
		from employee
		where emp_id = #{emp_id}	
	</select>

    <!-- 사원 상세 정보 2 (직급, 직책 이름 추가) -->
    <select id="getEmployeeDetail" parameterType="String" resultType="hashmap">
        select a.*, b.*, c.*, d.*
        from employee a, position b, DEPARTMENT c, JOB d
        where a.emp_id = #{emp_id}
        AND a.POSI_ID = b.POSI_ID
        AND a.DEPART_ID = c.DEPART_ID
        AND a.JOB_ID = d.JOB_ID
    </select>
    
    
     <!-- 사원 상세 정보 3 (직급, 직책 이름 추가 null인경우 사용) -->
    <select id="getEmployeeDetail2" parameterType="String" resultType="hashmap">
         select a.*, b.*, c.*, d.*
        from employee a
        LEFT OUTER JOIN position b ON a.POSI_ID = b.POSI_ID
        LEFT OUTER JOIN DEPARTMENT c ON a.DEPART_ID = c.DEPART_ID
        LEFT OUTER JOIN JOB d ON a.JOB_ID = d.JOB_ID
        where a.EMP_ID = #{emp_id}
        ORDER BY a.posi_id
    </select>
    
    <!-- 부서별 사원 정보 -->
    <select id="getDepartEmpDetail" parameterType="String" resultType="hashmap">
	     select a.*, b.*, c.*, d.*
        from employee a
        LEFT OUTER JOIN position b ON a.POSI_ID = b.POSI_ID
        LEFT OUTER JOIN DEPARTMENT c ON a.DEPART_ID = c.DEPART_ID
        LEFT OUTER JOIN JOB d ON a.JOB_ID = d.JOB_ID
        where c.DEPART_ID = #{depart_id}
        ORDER BY a.posi_id
    </select>
    
    <!-- 사원 검색 -->
    <select id="searchEmp" parameterType="String" resultType="hashMap">
    	   select a.*, b.*, c.*, d.*
        from employee a
        LEFT OUTER JOIN position b ON a.POSI_ID = b.POSI_ID
        LEFT OUTER JOIN DEPARTMENT c ON a.DEPART_ID = c.DEPART_ID
        LEFT OUTER JOIN JOB d ON a.JOB_ID = d.JOB_ID
        where a.emp_nm  like '%'||#{keyword}||'%' 
        ORDER BY a.posi_id
    </select>
    
	
	<!-- 사원 페이징 리스트 -->
	<select id="getEmployeeList" resultType="map" parameterType="employee">
		select a.*
		from 
		    (select rownum rn, a.*
		     from 
		        (select a.*
		        from employee a
		        order by emp_id) a) a
		where rn between #{pagesize}*(#{page} - 1) + 1 and #{pagesize}*#{page}
	</select>
	
	
	<!-- 사원 페이징리스트 (직책이름, 부서이름, 직위이름 추가) -->
	<select id="getDetailPagingList" resultType="hashMap" parameterType="map">
		 select a.*
			from 
			    (select rownum rn, a.*
			     from 
	            (select a.*, b.posi_nm, c.depart_nm, d.job_nm
	                from employee a
	                LEFT OUTER JOIN position b ON a.POSI_ID = b.POSI_ID
	                LEFT OUTER JOIN DEPARTMENT c ON a.DEPART_ID = c.DEPART_ID
	                LEFT OUTER JOIN JOB d ON a.JOB_ID = d.JOB_ID
	                ORDER BY a.posi_id) a) a
	      where rn between #{pagesize}*(#{page} - 1) + 1 and #{pagesize}*#{page}
      </select>
	
	
	<!-- 사원 등록 -->
	<insert id="insertEmployee" parameterType="employee">
		insert into employee (emp_id, pass, emp_nm, rank, email, tel, join_dt, depart_id, posi_id, emp_pic, sign, able, email_pass, job_id)
			values(#{emp_id}, 
				   #{pass}, 
				   #{emp_nm}, 
				   'USER', 
				   #{email}, 
				   #{tel},
				   #{join_dt}, 
				   #{depart_id}, 
				   #{posi_id}, 
				   #{emp_pic, jdbcType=VARCHAR}, 
				   #{sign, jdbcType=VARCHAR}, 
				   'T', 
				   #{email_pass},
				   #{job_id})
	</insert>
	
	<!-- 사원 삭제 -->
	<delete id="deleteEmployee" parameterType="String">
		delete employee where emp_id = #{emp_id}
	</delete>
	
	<!-- 사원 수정 -->
	<update id="updateEmployee" parameterType="employee">
		update employee set emp_id = #{emp_id}, 
							  pass = #{pass}, 
							  rank = #{rank},   
							 email = #{email},
							   tel = #{tel}, 
						   join_dt = #{join_dt},
						   emp_pic = #{emp_pic}, 
							  sign = #{sign, jdbcType=VARCHAR},
							  able = 'T',
						email_pass = #{email_pass}
		 where emp_id = #{emp_id}
	</update>
	
	<!-- 사원 리스트 able 수정 -->
	<update id="updateEmployeeAble" parameterType="employee">
		update employee set able = #{able}
		 where emp_id = #{emp_id}
	</update>
	
	<!-- 사원 리스트 rank 수정 -->
	<update id="updateEmployeeRank" parameterType="employee">
		update employee set rank = #{rank}
		 where emp_id = #{emp_id}
	</update>
	
	<!-- 사원 직급 수정 -->
	<update id="updateEmployeePosition" parameterType="employee">
		update employee set posi_id = #{posi_id}
		 where emp_id = #{emp_id}
	</update>
	
	<!-- 사원 부서 수정 -->
	<update id="updateEmployeeDepartment" parameterType="employee">
		update employee set depart_id = #{depart_id}
		 where emp_id = #{emp_id}
	</update>
	
	<!-- 사원 직책 수정 -->
	<update id="updateEmployeeJob" parameterType="employee">
		update employee set job_id = #{job_id}
		 where emp_id = #{emp_id}
	</update>
	
	<!-- 사원 아이디 중복체크 -->
	<select id = "idCheck" parameterType = "String" resultType = "int">
    	select count(*) from employee 
    	 where emp_id = #{emp_id}
	</select>
	
</mapper>